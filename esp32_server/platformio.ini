[env:m5stack-core2]
platform = espressif32               ; Specify the platform as ESP32 for M5Stack Core2
board = m5stack-core2                ; Use the M5Stack Core2 board configuration
framework = arduino                  ; Specify the Arduino framework for development
monitor_speed = 115200               ; Set the monitor baud rate for serial output
upload_speed = 921600                ; Set the upload speed for flashing the firmware
board_build.partitions = partitions.csv  ; Use a custom partition table defined in "partitions.csv"
board_build.filesystem = spiffs      ; Use SPIFFS (SPI Flash File System)
board_build.psram = true             ; Enable PSRAM (Pseudo-Static RAM) for more memory

lib_extra_dirs = /home/cppdoth/Desktop/Smart-Home-pp4-main/platformio/include
                                        ; Specify extra directories for custom libraries

build_flags = 
    -I include/                      ; Include directory for header files
    -I src/                          ; Include source directory
    -std=gnu++17                     ; Set the C++ standard to C++17 with GNU extensions
    -DWIFI_SSID=\"${sysenv.WIFI_SSID}\"   ; Define macro for WiFi SSID from system environment
    -DWIFI_PASSWORD=\"${sysenv.WIFI_PASSWORD}\"  ; Define macro for WiFi password from system environment
    -DDJANGO_USERNAME=\"${sysenv.DJANGO_API_USERNAME}\"  ; Define macro for Django API username from system environment
    -DDJANGO_PASSWORD=\"${sysenv.DJANGO_API_PASSWORD}\"  ; Define macro for Django API password from system environment
    -DMBEDTLS_CONFIG_FILE='"mbedtls/esp_config.h"'  ; Set custom configuration file for mbedTLS

lib_deps = 
    M5Unified                        ; Library for unified M5Stack Core2 handling
    me-no-dev/ESP Async WebServer @ ^1.2.3  ; Asynchronous web server for ESP32
    me-no-dev/AsyncTCP @ ^1.1.1       ; Asynchronous TCP library
    mbedTLS                           ; Lightweight TLS/SSL library
    WiFi                              ; WiFi library for ESP32
    ArduinoJson                       ; Library for handling JSON objects
    WiFiClientSecure                  ; Secure WiFi client for HTTPS connections
    SD                                ; Library for handling SD cards
    SPIFFS                            ; Repeated: File system library for ESP32 (remove duplication)
    Adafruit BusIO                    ; Adafruit's I2C and SPI library
    HTTPClient                        ; HTTP client library for HTTP requests
    ArduinoWebsockets                 ; Library for WebSocket communication
    Wire                              ; I2C communication library
    FS                                ; File system handling library
    Update                            ; Library for firmware updates
    LittleFS                          ; Alternative to SPIFFS, a lightweight file system
    AsyncTCP                          ; Asynchronous TCP library (remove duplication)
    densaugeo/base64@^1.4.0           ; Base64 encoding/decoding library
    https://github.com/espressif/arduino-esp32#2.0.5  ; ESP32 Arduino core
